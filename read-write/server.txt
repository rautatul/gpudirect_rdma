// SPDX-License-Identifier: GPL-2.0

#include "common.h"

static int on_connect_request(struct rdma_cm_event *event);
static int on_connection(struct rdma_cm_id *id);
static int on_disconnect(struct rdma_cm_id *id);
static int on_event(struct rdma_cm_event *event);
static void usage(const char *argv0);

/* Preset values */
static enum queue_mode server_qmode = QUEUE_NORMAL;
static enum page_mode server_pmode = PAGE_DEFAULT;
static uint16_t server_qdepth = DEFAULT_QDEPTH;
static int qps_requested;
static int qps_connected;
static int qps_disconnected;
unsigned int server_qps = 1;
unsigned int server_cqs = 1;

int main(int argc, char **argv)
{
	struct rdma_cm_id **listener_array = NULL;
	unsigned long server_port_list[MAX_QP] = {};
	struct sockaddr_in6 addr;
	struct rdma_cm_event *event = NULL;
	struct rdma_event_channel *ec = NULL;
	uint16_t port = 0;
	char *default_server_port = "11235";
	enum error_handling on_error = DIE_ON_ERROR;
	int opt, i;

	if (argc > 8)
		usage(argv[0]);

	while ((opt = getopt(argc, argv, "hkjq:p:t:y:")) != -1) {
		switch (opt) {
		case 'p':
			default_server_port = optarg;
			break;
		case 'q':
			server_qdepth = strtoul(optarg, NULL, 10);
			break;
		case 't':
			server_qps = strtoul(optarg, NULL, 10);
			server_qps = (server_qps > MAX_QP) ?
				     MAX_QP : ((server_qps < MIN_QP) ?
				     MIN_QP : server_qps);
			break;
		case 'y':
			server_cqs = strtoul(optarg, NULL, 10);
			server_cqs = (server_cqs > MAX_QP) ?
				     MAX_QP : ((server_cqs < MIN_QP) ?
				     MIN_QP : server_cqs);
			break;
		case 'k':
			server_qmode = QUEUE_SHARED;
			break;
		case 'j':
			server_pmode = PAGE_HUGE;
			break;
		case 'e':
			on_error = HANG_ON_ERROR;
			break;
		case 'h':
			usage(argv[0]);
			break;
		}
	}

	qps_requested = 0;
	qps_connected = 0;
	qps_disconnected = 0;

	set_operating_mode(server_qmode, server_pmode);
	printf("Default Server Port: %s\n", default_server_port);

	/* Create Event Channel */
	TEST_Z(ec = rdma_create_event_channel());

	/* Initialize cq_indexes and qps */
	initialize_queues(server_qps, server_cqs);
	set_test_params(0, ROLE_SERVER, on_error);

	for (i = 0; i < server_qps; i++) {
		// Start off at 11235
		server_port_list[i] = SERVER_PORT_BASE + i;
	}

	/* Build array of cm_ids */
	listener_array = malloc(sizeof(struct rdma_cm_id *) * server_qps);

	/*
	 * Iterate for server_qps and associate
	 * create new cm_ids
	 */
	for (i = 0; i < server_qps; i++) {
		memset(&addr, 0, sizeof(addr));
		addr.sin6_family = AF_INET6;
		addr.sin6_port = htons(server_port_list[i]);

		TEST_NZ(rdma_create_id(ec, &listener_array[i],
				       NULL, RDMA_PS_TCP));
		TEST_NZ(rdma_bind_addr(listener_array[i],
				       (struct sockaddr *)&addr));
		/* backlog=10 is arbitrary */
		TEST_NZ(rdma_listen(listener_array[i], 10));
		port = ntohs(rdma_get_src_port(listener_array[i]));
		printf("listening on port %d.\n", port);
	}

	printf("server qdepth(pre-negotiation): %d\n", server_qdepth);

	while (rdma_get_cm_event(ec, &event) == 0) {
		struct rdma_cm_event event_copy;

		memcpy(&event_copy, event, sizeof(*event));
		rdma_ack_cm_event(event);

		if (on_event(&event_copy))
			break;
	}

	for (i = 0; i < server_qps; i++)
		rdma_destroy_id(listener_array[i]);

	/* Destroy Event Channel */
	rdma_destroy_event_channel(ec);

	return 0;
}

int on_connect_request(struct rdma_cm_event *event)
{
	struct rdma_conn_param cm_params;
	struct rdma_conn_param recv_param;
	struct user_data temp;

	printf("received connection request.\n");
	recv_param = event->param.conn;
	temp = *(struct user_data *)recv_param.private_data;
	printf("Received QD from Client: %d\n", temp.qdepth);
	printf("Received Blocksize from Client: %d\n", temp.blocksize);
	printf("Received SGE from Client: %d\n", temp.no_sge);
	set_user_data(temp);

	// Throttle qdepth to max allowable qdepth as decided
	// by the server
	if (temp.qdepth > server_qdepth)
		temp.qdepth = server_qdepth;

	/* NOTE:
	 *  You would have to run
	 * build_context only once.
	 * This is because rdma_cm_ids
	 * are dependent on the singular context
	 * which in this case is the ibv_device
	 * which will remain for subsequent
	 * cm_id structures
	 */
	if (qps_requested == 0)
		build_context(event->id->verbs);

	build_connection(event->id);
	build_params(&cm_params, &temp);
	reg_mem_and_post_recv(event->id);

	TEST_NZ(rdma_accept(event->id, &cm_params));

	qps_requested += 1;
	DEBUG_PRINT("%s: Exit\n", __func__);

	return 0;
}

int on_connection(struct rdma_cm_id *id)
{
	DEBUG_PRINT("%s: Entry\n", __func__);
	on_connect(id->context);

	qps_connected += 1;
	if (qps_connected == server_qps)
		release_cq_lock();

	return 0;
}

int on_disconnect(struct rdma_cm_id *id)
{
	printf("peer disconnected.\n");

	destroy_connection(id->context);
	qps_disconnected += 1;

	if (qps_disconnected == server_qps)
		return 1;

	return 0;
}

int on_event(struct rdma_cm_event *event)
{
	int r = 0;

	if (event->event == RDMA_CM_EVENT_CONNECT_REQUEST)
		r = on_connect_request(event);
	else if (event->event == RDMA_CM_EVENT_ESTABLISHED)
		r = on_connection(event->id);
	else if (event->event == RDMA_CM_EVENT_DISCONNECTED)
		r = on_disconnect(event->id);
	else {
		printf("%s: unknown event.\n", __func__);
		die();
	}

	return r;
}

void usage(const char *argv0)
{
	printf("Usage:\n");
	printf("%s -<parameter-flag> <parameter-args>\n", argv0);
	printf("%s -q <qdepth> -t <qps> -y <cqs>\n", argv0);
	printf("Parameters:\n");
	printf("	Queue Pairs: -t <qp>\n");
	printf("	Completion Queues: -y <cqs>\n");
	printf("	Shared Receive Queues: -k\n");
	exit(1);
}
